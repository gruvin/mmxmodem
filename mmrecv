#!/usr/bin/python
import sys
from os import remove, rename, unlink
from os.path import isfile
import serial
from xmodem import XMODEM
from time import sleep
import logging

if len(sys.argv) < 3:
  print 'Usage: ' + sys.argv[0] + ' <serial-port> <source-filename> [<local-filename>]\n'
  quit()

sp = sys.argv[1]
fn = sys.argv[2]
dfn = fn
if len(sys.argv) == 4: dfn = sys.argv[3]

try:
    stream = file(dfn+'.incoming', 'wb')
except:
    print 'Oops! Could not create local file %s\n' % (fn)
    quit()
    
logger = logging.getLogger('xmodem')
logger.setLevel(logging.WARNING)
ch = logging.StreamHandler()
ch.setLevel(logging.WARNING)
logger.addHandler(ch)

try:
  s = serial.Serial(
    port=sp, 
    baudrate=115200, 
    bytesize=8, 
    parity='N',
    stopbits=1,
    timeout=0.2 
  )
except:
  print 'ERROR: Could not access serial port ' + sp + '\n'
  quit()

s.flushInput()

def getc(size, timeout=1):
  return s.read(size) or None
def putc(data, timeout=1):
  return s.write(data) or None
modem = XMODEM(getc, putc)

found = 0
for c in range(1, 3):
    hello = s.readline()
    if hello.find('Maximite') != -1: 
        found = 1
        break
    s.close()
    sleep(0.2)
    s.open()
if found == 0:
    print 'Expected Maximite BASIC ..., but got ' + hello + '\nAborting.\n\n'
    quit()

sleep(0.1)
print "MM-BASIC connected. Setting up XMODEM transfer ..."
s.flushInput();

# cancel any hanging XMODEM session at Maximite end
s.write("\030\030")
sleep(0.2)
s.flushInput();

# forcibly return to MM-BASIC prompt
s.write("\003");
sleep(0.1)
s.flushInput();

s.write('xmodem send "' + fn + '"\r')
sleep(0.1)
e = s.readline(); # out own command is echoed back first
e = s.readline(); # should timeout if no error on MM side
if e[:18] == "Error: Cannot":
    print 'Oops! Remote file %s not found!' % (fn)
    s.close()
    stream.close()
    remove(dfn+'.incoming')
    quit()
    
s.flushInput()

print 'Receiving  ' + fn + ' as ' + dfn + ' ...'

bytes = modem.recv(stream, quiet=0, retry=8)
stream.close()

if (bytes != None):
    if isfile(dfn): unlink(dfn)
    rename(dfn+'.incoming', dfn)
    print "Done! (%d bytes received)\n" % (bytes)
else:
    print "There could be a problem :-(\n"
    if (bytes == 0):
        remove(dfn+'.incoming')
    else:
        print "Partial(?) transfer retained in: %s.incoming" % (dfn)
    quit();

s.close()

